<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AlreadyInstalled" xml:space="preserve">
    <value>Package '{0}' is already installed.</value>
  </data>
  <data name="CompletedDownload" xml:space="preserve">
    <value>Completed downloading '{0}'.</value>
  </data>
  <data name="CompletedIterating" xml:space="preserve">
    <value>Completed iterating for '{0}'.</value>
  </data>
  <data name="CopyUnzippedFiles" xml:space="preserve">
    <value>Copying unzipped package to '{0}'</value>
  </data>
  <data name="CouldNotGetResponseFromQuery" xml:space="preserve">
    <value>Could not get response from query '{0}'.</value>
  </data>
  <data name="CreateDirectory" xml:space="preserve">
    <value>Create directory '{0}'.</value>
  </data>
  <data name="CreateFile" xml:space="preserve">
    <value>Create a file '{0}'.</value>
  </data>
  <data name="DebugInfoCallMethod" xml:space="preserve">
    <value>Calling '{0}'::'{1}'.</value>
  </data>
  <data name="DebugInfoCallMethod3" xml:space="preserve">
    <value>Calling '{0}'::'{1}', '{2}'.</value>
  </data>
  <data name="DebugInfoReturnCall" xml:space="preserve">
    <value>Returning the call '{0}'::'{1}'.</value>
  </data>
  <data name="DependencyHasBothElements" xml:space="preserve">
    <value>Dependency cannot have both dependency and group elements.</value>
  </data>
  <data name="DependencyLoopDetected" xml:space="preserve">
    <value>Dependency loop detected for package '{0}'.</value>
  </data>
  <data name="DependentPackageFailedInstallOrDownload" xml:space="preserve">
    <value>Dependent Package '{0}' failed to {1}.</value>
  </data>
  <data name="DownloadingPackage" xml:space="preserve">
    <value>Downloading '{0}'.</value>
  </data>
  <data name="DownloadingProgress" xml:space="preserve">
    <value>Downloaded {0:0.00} MB out of {1:0.00} MB.</value>
  </data>
  <data name="FailedDownloadPackage" xml:space="preserve">
    <value>Downloading package '{0}' failed, please make sure '{1}' is accessable.</value>
  </data>
  <data name="FileNotFound" xml:space="preserve">
    <value>File '{0}' does not exist in '{1}'.</value>
  </data>
  <data name="FinishInstalling" xml:space="preserve">
    <value>Finish installing package '{0}'</value>
  </data>
  <data name="FoundRegisteredSource" xml:space="preserve">
    <value>Source '{0}' is one of the registered sources in '{1}' provider.</value>
  </data>
  <data name="FoundTotalRegisteredSource" xml:space="preserve">
    <value>Found '{0}' registered package source in '{1}' provider.</value>
  </data>
  <data name="HashNotFound" xml:space="preserve">
    <value>Hash not found for the package '{0}'.</value>
  </data>
  <data name="HashNotMatch" xml:space="preserve">
    <value>Hash for package '{0}' does not match hash provided from the server.</value>
  </data>
  <data name="HashNotSupported" xml:space="preserve">
    <value>Hash algorithm '{0}' is not supported.</value>
  </data>
  <data name="HeaderIgnored" xml:space="preserve">
    <value>Provided header value '{0}' was invalid and hence ignored.</value>
  </data>
  <data name="IncompleteDownload" xml:space="preserve">
    <value>Download is incomplete. Downloaded '{0}' out of '{0}' bytes.</value>
  </data>
  <data name="InstalledOrDownloadedDependencyPackage" xml:space="preserve">
    <value>{0}ed dependent package '{1}'</value>
  </data>
  <data name="InstallingOrDownloadingDependencyPackage" xml:space="preserve">
    <value>{0}ing dependent package '{1}'</value>
  </data>
  <data name="InstallingOrDownloadingPackage" xml:space="preserve">
    <value>{0}ing package '{1}'</value>
  </data>
  <data name="InvalidFileExtension" xml:space="preserve">
    <value>The file extension '{0}' is not valid. The required file extension is '.nupkg'.</value>
  </data>
  <data name="InvalidPackage" xml:space="preserve">
    <value>The package '{0}' does not have the .nuspec file.</value>
  </data>
  <data name="InvalidPackageSaveModeArgument" xml:space="preserve">
    <value>The property of PackageSaveMode specified '{0}' is invalid.</value>
  </data>
  <data name="InvalidQueryUrl" xml:space="preserve">
    <value>Query Url {0} is invalid.</value>
  </data>
  <data name="InvalidVersionString" xml:space="preserve">
    <value>'{0}' is not a valid version string.</value>
  </data>
  <data name="Iterating" xml:space="preserve">
    <value>Iterating '{0}'.</value>
  </data>
  <data name="LoadedConfigurationFile" xml:space="preserve">
    <value>Loaded a configuration from file '{0}'.</value>
  </data>
  <data name="LoadingConfigurationFile" xml:space="preserve">
    <value>Loading a configuration from file '{0}'.</value>
  </data>
  <data name="ManifestRequiredXmlElementMissing" xml:space="preserve">
    <value>The required xml element '{0}' is missing from the manifest.</value>
  </data>
  <data name="MissingConfigurationElement" xml:space="preserve">
    <value>Configuration file '{0}' does not have 'configuration' element.</value>
  </data>
  <data name="NotFoundRegisteredSource" xml:space="preserve">
    <value>Source '{0}' is not one of the registered sources in '{1}' provider.</value>
  </data>
  <data name="NuspecRequiredXmlElementMissing" xml:space="preserve">
    <value>The required xml element '{0}' is missing from the nuspec.</value>
  </data>
  <data name="PackageFailedInstallOrDownload" xml:space="preserve">
    <value>Package '{0}' failed to {1}.</value>
  </data>
  <data name="PackageFailedToInstallReason" xml:space="preserve">
    <value>Package '{0}' failed to be installed because: {1}</value>
  </data>
  <data name="PackagesReceived" xml:space="preserve">
    <value>'{0}' packages received in the last request.</value>
  </data>
  <data name="ReadingManifest" xml:space="preserve">
    <value>Process Package Manifest</value>
  </data>
  <data name="RegisteredSources" xml:space="preserve">
    <value>There are '{0}' registered sources in '{1}' provider.</value>
  </data>
  <data name="RemovedPackageSource" xml:space="preserve">
    <value>Removed the package source: '{0}'.</value>
  </data>
  <data name="RequestCanceled" xml:space="preserve">
    <value>Request is canceled in '{0}'::'{1}'.</value>
  </data>
  <data name="RetryingDownload" xml:space="preserve">
    <value>Retry downloading '{0}' for '{1}' more times</value>
  </data>
  <data name="SavingConfigurationWithFile" xml:space="preserve">
    <value>Saving a config with a file path '{0}'.</value>
  </data>
  <data name="SearchingRepository" xml:space="preserve">
    <value>Searching repository '{0}' for '{1}'.</value>
  </data>
  <data name="SettingConfigurationToNull" xml:space="preserve">
    <value>Setting a config object to null.</value>
  </data>
  <data name="SkippedDownloadedPackage" xml:space="preserve">
    <value>Skipping Downloaded Package '{0}'.</value>
  </data>
  <data name="SourceIsADirectory" xml:space="preserve">
    <value>Source '{0}' is a directory.</value>
  </data>
  <data name="SourceIsAFilePath" xml:space="preserve">
    <value>Source '{0}' is a file path.</value>
  </data>
  <data name="SourceLocationNotValid" xml:space="preserve">
    <value>Source Location '{0}' is not valid.</value>
  </data>
  <data name="SuccessfullyDownloaded" xml:space="preserve">
    <value>Package '{0}' is downloaded.</value>
  </data>
  <data name="SuccessfullyInstalled" xml:space="preserve">
    <value>Package '{0}' is installed.</value>
  </data>
  <data name="SuccessfullyValidated" xml:space="preserve">
    <value>Source '{0}' is validated.</value>
  </data>
  <data name="TotalPackageYield" xml:space="preserve">
    <value>Total package yield:'{0}' for the specified package '{1}'.</value>
  </data>
  <data name="TypeMustBeASemanticVersion" xml:space="preserve">
    <value>Type to compare must be an instance of SemanticVersion.</value>
  </data>
  <data name="UnableToInstallPackage" xml:space="preserve">
    <value>The package '{0}' failed to install.</value>
  </data>
  <data name="UnableToResolveDependency" xml:space="preserve">
    <value>Unable to resolve package dependency -- package '{0}' not found.</value>
  </data>
  <data name="UnableToResolveSource" xml:space="preserve">
    <value>Unable to resolve package source '{0}'.</value>
  </data>
  <data name="UnexpectedFileType" xml:space="preserve">
    <value>The file extension '{0}'::'{1}' is not valid. The required file extension is '.nuspec' or '.nupkg'.</value>
  </data>
  <data name="UninstalledPackage" xml:space="preserve">
    <value>Uninstalled '{0}' package.</value>
  </data>
  <data name="UnknownCategory" xml:space="preserve">
    <value>Unknown category for '{0}'::'{1}': '{2}'</value>
  </data>
  <data name="Unzipping" xml:space="preserve">
    <value>Unzipping</value>
  </data>
  <data name="UriSchemeNotSupported" xml:space="preserve">
    <value>Uri Scheme '{0}' is not supported.</value>
  </data>
  <data name="UseDefaultConfig" xml:space="preserve">
    <value>Use the default configuration.</value>
  </data>
  <data name="VariableCheck" xml:space="preserve">
    <value>'{0}' is '{1}'.</value>
  </data>
  <data name="Yielding" xml:space="preserve">
    <value>Yielding.</value>
  </data>
  <data name="YieldingPackageSource" xml:space="preserve">
    <value>Yielding the package source: '{0}'.</value>
  </data>
</root>